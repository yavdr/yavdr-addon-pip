#!/bin/bash
tmp_file=/run/user/$(id -u)/vdr-pip.tmp

pip_margin_right=30
pip_margin_top=30
pip_width=720

source /etc/vdr-pip/vdr-pip.conf

function vdr-pip-dbus-send
{
DEST=de.tvdr.vdr1
VDR_INTERFACE=de.tvdr.vdr
OBJECT=$1
shift
INTERFACE=$1
shift

dbus-send --system --type=method_call --dest=$DEST --print-reply $OBJECT $VDR_INTERFACE.$INTERFACE "$@"
}

function 16_9_window_height
{
    echo $(( $1 * 1080 / 1920 ))
}

function get_vdr_channel
{
    # get the channel currently tuned to by the main vdr
    vdr_channel=$(vdr-dbus-send /Remote remote.SwitchChannel string:'' | grep -Po "(?<=string \")\d+")
}

function get_pip_channel
{
    # get the channel currently tuned to by the pip vdr
    pip_channel=$(vdr-pip-dbus-send /Remote remote.SwitchChannel string:'' | grep -Po "(?<=string \")\d+")
}

# preparation before starting the pip vdr
function _pre_start
{
    # update channels.conf
    cp /var/lib/vdr/channels.conf /var/lib/vdr-pip/channels.conf

    # get the window id of the currently active vdr frontend
    main_window_id=$(wmctrl -l | awk '/\yVDR\B|softhddevice|xine/{print $1; exit;}')

    rm -f "$tmp_file"
    # write variables to a file, so we can read them later
    [ -n "$main_window_id" ] &&
    echo "main_window_id=${main_window_id}" > "$tmp_file"

    get_vdr_channel
    [ -z "$vdr_channel" ] && return

    # set the channel in the setup.conf of our pip vdr to $vdrchan
    sed -i "/CurrentChannel/d" /var/lib/vdr-pip/setup.conf
    echo "CurrentChannel = ${vdr_channel}" >> /var/lib/vdr-pip/setup.conf
    echo "vdr_channel=${vdr_channel}" >> "$tmp_file"
}

function _post_start
{
    # move pip window to desired position
    # source the previously written variables
    . "$tmp_file"

    # get the screen resolution
    IFS='x' read -r screen_width screen_height < <(xrandr -q | awk '/\*/{print $1}')

    # get the window id of the pip vdr frontend
    if [ -z "$main_window_id" ]; then
        while [ -z "$pip_window_id" ]; do
            pip_window_id=$(wmctrl -l | awk '/VDR|softhddevice|xine/ {print $1; exit;}' )
	done
    else
        while [ -z "$pip_window_id" ]; do
            pip_window_id=$(wmctrl -l | awk '/VDR|softhddevice|xine/ && !/'"$main_window_id"'/ {print $1}')
        done
    fi

    # write variables to temporary file
    echo "pip_window_id=${pip_window_id}" >> "$tmp_file"
    echo "screen_width=${screen_width}" >> "$tmp_file"
    echo "screen_height=${screen_height}" >> "$tmp_file"

}

function _post_stop
{
    # source the previously written variables
    . "$tmp_file"
    # restore the main window to maximized state
    wmctrl -i -r $main_window_id -b add,maximized_vert,maximized_horz
}
